# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a multi platform

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ ubuntu-20.04, ubuntu-latest, macos-latest ]
        build_type: [ Release ]
        c_compiler: [ gcc, clang ]
        include:
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-20.04
            c_compiler: gcc
            cpp_compiler: g++
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix

    steps:
      - uses: actions/checkout@v4

      - name: Configure CMake for ubuntu-latest
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt update && sudo apt install libopencv-dev libglu1-mesa-dev libglfw3-dev libgl1-mesa-dev -y && wget https://github.com/isl-org/Open3D/releases/download/v0.18.0/open3d-devel-linux-x86_64-cxx11-abi-0.18.0.tar.xz && tar -xvf open3d-devel-linux-x86_64-cxx11-abi-0.18.0.tar.xz && wget https://github.com/microsoft/onnxruntime/releases/download/v1.16.3/onnxruntime-linux-x64-1.16.3.tgz && tar -zxvf onnxruntime-linux-x64-1.16.3.tgz && cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DENABLE_OPEN3D=ON

      - name: Configure CMake for ubuntu-20.04
        if: matrix.os == 'ubuntu-20.04'
        run: sudo apt update && sudo apt install libopencv-dev libglu1-mesa-dev libglfw3-dev libgl1-mesa-dev -y && wget https://github.com/isl-org/Open3D/releases/download/v0.18.0/open3d-devel-linux-x86_64-cxx11-abi-0.18.0.tar.xz && tar -xvf open3d-devel-linux-x86_64-cxx11-abi-0.18.0.tar.xz && wget https://github.com/microsoft/onnxruntime/releases/download/v1.16.3/onnxruntime-linux-x64-1.16.3.tgz && tar -zxvf onnxruntime-linux-x64-1.16.3.tgz && cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DENABLE_OPEN3D=ON

      - name: Configure CMake for macos-latest
        if: matrix.os == 'macos-latest'
        run: brew update && brew install wget opencv llvm ninja ccache pkg-config libomp cmake && wget https://github.com/isl-org/Open3D/releases/download/v0.18.0/open3d-devel-darwin-arm64-0.18.0.tar.xz && tar -xvf open3d-devel-darwin-arm64-0.18.0.tar.xz && wget https://github.com/microsoft/onnxruntime/releases/download/v1.16.3/onnxruntime-osx-arm64-1.16.3.tgz && tar -zxvf onnxruntime-osx-arm64-1.16.3.tgz && cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DENABLE_OPEN3D=ON

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build
